export const tokenTypes = [
  { type: "boolean", value: true, active: true, test: /true/ },
  { type: "boolean", value: false, active: true, test: /false/ },
  { type: "not", value: null, active: true, test: /not/ },
  { type: "null", value: null, active: false, test: /null/ },
  { type: "undefined", value: undefined, active: false, test: /undefined/ },
  { type: "number", value: null, test: /NaN/ },
  { type: "number", value: null, test: /Infinity/ },
  { type: "number", value: null, test: /-Infinity/ },
  { type: "number", value: null, active: true, test: /[0-9]+(\.[0-9]+)?/ },
  // { type: "number", value: null, active: true, test: /^\+([eE][+-]?\d+)?/ },
  {
    type: "document_object",
    test: /<[^/!][^>]*>/,
    expect: ["DOCUMENT_OBJECT", "TEXT_CONTENT"],
  },
  {
    type: "document_object_closer",
    test: /<\/[^/!][^>]*>/,
    expect: ["DOCUMENT_OBJECT", "TEXT_CONTENT"],
  },
  {
    type: "server_shaper",
    value: null,
    test: /:[^:]*?>/
  },
  {
    type: "client_shaper",
    value: null,
    test: /::[^]*?>/
  },
  { type: "string", value: null, active: true, test: /"(?:\\.|[^"])*"/ },
  { type: "string", value: null, active: true, test: /'(?:\\.|[^'])*'/ },
  { type: "comment", value: null, test: /\/\/.*$/m },
  { type: "whitespace", value: null, active: true, test: /\s+/ },
  { type: "open_paren", value: "(", test: /\(/ },
  { type: "close_paren", value: ")", test: /\)/ },
  { type: "comma", value: ",", test: /,/ },
  { type: "semicolon", value: ";", test: /;/ },
  { type: "open_bracket", value: "[", test: /\[/ },
  { type: "close_bracket", value: "]", test: /\]/ },
  { type: "open_curly", value: "{", test: /{/ },
  { type: "close_curly", value: "}", test: /}/ },
  { type: "dot", value: ".", test: /\./ },
  { type: "colon", value: ":", test: /:/ },
  { type: "equals", value: "=", test: /=/ },
  { type: "plus", value: "+", test: /\+/ },
  { type: "minus", value: "-", test: /-/ },
  { type: "star", value: "*", test: /\*/ },
  { type: "forward_slash", value: "/", test: /\// },
  { type: "back_slash", value: "\\", test: /\\/ },
  { type: "modulo", value: "%", test: /%/ },
  { type: "and", value: "&&", test: /&&/ },
  { type: "or", value: "||", test: /\|\|/ },
  { type: "not", value: "!", test: /!/ },
  { type: "question", value: "?", test: /\?/ },
  { type: "less_than", value: "<", test: /</ },
  { type: "greater_than", value: ">", test: />/ },
  { type: "less_than_or_equal", value: "<=", test: /<=/ },
  { type: "greater_than_or_equal", value: ">=", test: />=/ },
  { type: "equals_equals", value: "==", test: /==/ },
  { type: "not_equals", value: "!=", test: /!=/ },
  { type: "equals_equals_equals", value: "===", test: /===/ },
  { type: "not_equals_equals", value: "!==", test: /!==/ },
  { type: "arrow", value: "=>", test: /=>/ },
  { type: "template_interpolation", value: null, test: /\$\{[^}]*\}/ },
  // { type: "documentText", test: /([\s\S]*?)/, expect: ["DOCUMENT_OBJECT"] },
  { type: "keyword", value: "if", test: /if/, expect: "OPEN_PAREN" },
  { type: "keyword", value: "else", test: /else/, expect: "OPEN_CURLY" },
  { type: "keyword", value: "switch", test: /switch/, expect: "OPEN_PAREN" },
  { type: "keyword", value: "case", test: /case/, expect: "EXPRESSION" },
  { type: "keyword", value: "default", test: /default/, expect: "COLON" },
  {
    type: "keyword",
    value: "break",
    test: /^break$/,
    expect: ["IDENTIFIER", "SEMICOLON"],
  },
  {
    type: "keyword",
    value: "continue",
    test: /^continue$/,
    expect: ["IDENTIFIER", "SEMICOLON"],
  },
  {
    type: "keyword",
    value: "return",
    test: /return/,
    expect: [
      "IDENTIFIER",
      "NUMBER",
      "STRING",
      "BOOLEAN",
      "OPEN_PAREN",
      "OPEN_CURLY",
      "SEMICOLON",
    ],
  },
  { type: "keyword", value: "throw", test: /throw/, expect: "EXPRESSION" },
  { type: "keyword", value: "try", test: /try/, expect: "OPEN_CURLY" },
  { type: "keyword", value: "catch", test: /catch/, expect: "OPEN_PAREN" },
  {
    type: "keyword",
    value: "finally",
    test: /^finally$/,
    expect: "OPEN_CURLY",
  },
  { type: "keyword", value: "for", test: /for/, expect: "OPEN_PAREN" },
  { type: "keyword", value: "while", test: /while/, expect: "OPEN_PAREN" },
  { type: "keyword", value: "do", test: /do/, expect: "OPEN_CURLY" },
  { type: "keyword", value: "var", test: /var/, expect: "IDENTIFIER" },
  { type: "keyword", value: "let", test: /let/, expect: "IDENTIFIER" },
  { type: "keyword", value: "const", test: /const/, expect: "IDENTIFIER" },
  {
    type: "keyword",
    value: "function",
    test: /function/,
    expect: "IDENTIFIER",
  },
  { type: "keyword", value: "class", test: /^class$/, expect: "IDENTIFIER" },
  {
    type: "keyword",
    value: "extends",
    test: /^extends$/,
    expect: "IDENTIFIER",
  },
  {
    type: "keyword",
    value: "import",
    test: /^import$/,
    expect: ["STRING", "BRACE", "ASTERISK"],
  },
  {
    type: "keyword",
    value: "export",
    test: /^export$/,
    expect: ["FUNCTION", "CLASS", "CONST", "VAR", "DEFAULT", "BRACE"],
  },
  { type: "keyword", value: "from", test: /from/, expect: "STRING" },
  { type: "keyword", value: "as", test: /as/, expect: "IDENTIFIER" },
  { type: "keyword", value: "new", test: /new/, expect: "IDENTIFIER" },
  { type: "keyword", value: "typeof", test: /typeof/, expect: "IDENTIFIER" },
  {
    type: "keyword",
    value: "instanceof",
    test: /^instanceof$/,
    expect: "IDENTIFIER",
  },
  { type: "keyword", value: "in", test: /^in$/, expect: "IDENTIFIER" },
  { type: "keyword", value: "void", test: /^void$/, expect: "EXPRESSION" },
  {
    type: "keyword",
    value: "delete",
    test: /^delete$/,
    expect: "MEMBER_EXPRESSION",
  },
  {
    type: "keyword",
    value: "await",
    test: /^await$/,
    expect: "ASYNC_EXPRESSION",
  },
  {
    type: "keyword",
    value: "async",
    test: /^async$/,
    expect: ["FUNCTION", "IDENTIFIER"],
  },
  { type: "keyword", value: "yield", test: /^yield$/, expect: "EXPRESSION" },
  {
    type: "keyword",
    value: "super",
    test: /^super$/,
    expect: ["DOT", "OPEN_PAREN"],
  },
  { type: "keyword", value: "this", test: /^this$/, expect: null },
  { type: "keyword", value: "with", test: /^with$/, expect: "OPEN_PAREN" },
  { type: "builtin", value: "Math", test: /^Math$/, expect: "DOT" },
  { type: "builtin", value: "JSON", test: /^JSON$/, expect: "DOT" },
  {
    type: "builtin",
    value: "Date",
    test: /^Date$/,
    expect: ["DOT", "OPEN_PAREN", "NEW"],
  },
  { type: "builtin", value: "RegExp", test: /^RegExp$/, expect: "OPEN_PAREN" },
  {
    type: "builtin",
    value: "Promise",
    test: /^Promise$/,
    expect: ["DOT", "NEW"],
  },
  {
    type: "builtin",
    value: "Array",
    test: /^Array$/,
    expect: ["DOT", "OPEN_BRACKET", "OPEN_PAREN", "NEW"],
  },
  { type: "builtin", value: "Object", test: /^Object$/, expect: "DOT" },
  {
    type: "builtin",
    value: "Function",
    test: /^Function$/,
    expect: ["DOT", "NEW"],
  },
  { type: "builtin", value: "Map", test: /^Map$/, expect: ["DOT", "NEW"] },
  { type: "builtin", value: "Set", test: /^Set$/, expect: ["DOT", "NEW"] },
  { type: "builtin", value: "WeakMap", test: /^WeakMap$/, expect: "NEW" },
  { type: "builtin", value: "WeakSet", test: /^WeakSet$/, expect: "NEW" },
  { type: "builtin", value: "Symbol", test: /^Symbol$/, expect: "OPEN_PAREN" },
  { type: "builtin", value: "BigInt", test: /^BigInt$/, expect: "OPEN_PAREN" },
  { type: "builtin", value: "Error", test: /^Error$/, expect: ["DOT", "NEW"] },
  {
    type: "builtin",
    value: "parseInt",
    test: /^parseInt$/,
    expect: "OPEN_PAREN",
  },
  {
    type: "builtin",
    value: "parseFloat",
    test: /^parseFloat$/,
    expect: "OPEN_PAREN",
  },
  { type: "builtin", value: "isNaN", test: /^isNaN$/, expect: "OPEN_PAREN" },
  {
    type: "builtin",
    value: "isFinite",
    test: /^isFinite$/,
    expect: "OPEN_PAREN",
  },
  { type: "builtin", value: "eval", test: /^eval$/, expect: "OPEN_PAREN" },
  {
    type: "builtin",
    value: "encodeURI",
    test: /^encodeURI$/,
    expect: "OPEN_PAREN",
  },
  {
    type: "builtin",
    value: "decodeURI",
    test: /^decodeURI$/,
    expect: "OPEN_PAREN",
  },
  {
    type: "builtin",
    value: "setTimeout",
    test: /^setTimeout$/,
    expect: "OPEN_PAREN",
  },
  {
    type: "builtin",
    value: "setInterval",
    test: /^setInterval$/,
    expect: "OPEN_PAREN",
  },
  {
    type: "builtin",
    value: "clearTimeout",
    test: /^clearTimeout$/,
    expect: "OPEN_PAREN",
  },
  {
    type: "builtin",
    value: "clearInterval",
    test: /^clearInterval$/,
    expect: "OPEN_PAREN",
  },
  { type: "builtin", value: "window", test: /window/, expect: "DOT" },
  { type: "builtin", value: "document", test: /document/, expect: "DOT" },
  { type: "builtin", value: "console", test: /console/, expect: "DOT" },
  {
    type: "identifier",
    value: null,
    active: true,
    test: /[a-zA-Z_$][a-zA-Z0-9_$]*/,
  },
];
